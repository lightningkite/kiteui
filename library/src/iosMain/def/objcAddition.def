language = Objective-C
package = com.lightningkite.rock.objc
---
#import <objc/runtime.h>
#import <UIKit/UIView.h>
#import <UIKit/UIColor.h>
#import <Foundation/NSArray.h>
#import <Foundation/NSURLSession.h>
#import <Foundation/NSURL.h>
#import <Foundation/NSData.h>
#import <Foundation/NSURLResponse.h>
#import <Foundation/NSError.h>

id getAssociatedObjectWithKey(id object, NSValue* key) {
  return objc_getAssociatedObject(object, key.pointerValue);
}
void setAssociatedObjectWithKey(id object, NSValue* key, id value) {
  return objc_setAssociatedObject(object, key.pointerValue, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}
CGRect cgRectValue(NSValue* key) {
  return key.CGRectValue;
}

@protocol KeyValueObserver
- (void)observeValueForKeyPath:(nullable NSString *)keyPath ofObject:(nullable id)object change:(nullable NSDictionary<NSKeyValueChangeKey, id> *)change context:(nullable void *)context;
@end

@protocol UIResponderWithOverrides

// Called and presented when object becomes first responder.  Goes up the responder chain.
@property (nullable, nonatomic, readonly, strong) __kindof UIView *inputView API_AVAILABLE(ios(3.2));
@property (nullable, nonatomic, readonly, strong) __kindof UIView *inputAccessoryView API_AVAILABLE(ios(3.2)) API_UNAVAILABLE(visionos);

@end


@protocol UIViewWithSizeOverrides
- (void)subviewDidChangeSizing:(UIView*)view;
// - (CGSize)sizeThatFitsV2WithWidth:(CGFloat)width height:(CGFloat)forceHeight minWidth:(CGFloat)minWidth maxWidth:(CGFloat)minWidth minHeight:(CGFloat)minWidth maxHeight:(CGFloat)minWidth;
@end

@protocol UICollectionViewFlowLayout2
- (void)prepareLayout;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset
                                 withScrollingVelocity:(CGPoint)velocity;
@end
