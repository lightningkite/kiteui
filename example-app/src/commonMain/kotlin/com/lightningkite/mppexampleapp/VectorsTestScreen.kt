package com.lightningkite.mppexampleapp

import com.lightningkite.rock.Routable
import com.lightningkite.rock.contains
import com.lightningkite.rock.fetch
import com.lightningkite.rock.models.*
import com.lightningkite.rock.navigation.RockScreen
import com.lightningkite.rock.reactive.Property
import com.lightningkite.rock.reactive.await
import com.lightningkite.rock.reactive.bind
import com.lightningkite.rock.views.*
import com.lightningkite.rock.views.direct.*

@Routable("test/vectors")
object VectorsTestScreen : RockScreen {
    override fun ViewWriter.render() {
        col {
            row {
                image {
                    source = ImageVector(
                        4.rem, 4.rem,
                        viewBoxWidth = 100,
                        viewBoxHeight = 100,
                        paths = listOf(ImageVector.Path(
                            strokeColor = Color.black,
                            strokeWidth = 4.0,
                            path = "M 20 50 A 60 60 0 0 0 80 50"
                        ), ImageVector.Path(
                            strokeColor = Color.blue,
                            strokeWidth = 2.0,
                            path = "M 50 0 V 100"
                        ))
                    )
                }
                image {
                    source = ImageVector(
                        4.rem, 4.rem,
                        viewBoxWidth = 320,
                        viewBoxHeight = 320,
                        paths = listOf(ImageVector.Path(
                            strokeColor = Color.black,
                            strokeWidth = 10.0,
                            path = "M 10 315\n" +
                                    "           L 110 215\n" +
                                    "           A 30 50 0 0 1 162.55 162.45\n" +
                                    "           L 172.55 152.45\n" +
                                    "           A 30 50 -45 0 1 215.1 109.9\n" +
                                    "           L 315 10"
                        ))
                    )
                }
//                image {
//                    source = ImageVector(
//                        4.rem,
//                        4.rem,
//                        viewBoxWidth = 100,
//                        viewBoxHeight = 100,
//                        paths = listOf(
//                            ImageVector.Path(
//                                fillColor = Color.green,
//                                path = "M 0,0 L 0,100 L 100,100 L 100,0 Z"
//                            ),
//                            ImageVector.Path(
//                                strokeColor = Color.blue,
//                                strokeWidth = 5.0,
//                                path = "M 25, 50 l 50,0 l -50,0 z"
//                            ),
//                            ImageVector.Path(
//                                fillColor = Color.red,
//                                strokeWidth = 2.0,
//                                path = "M 25, 50 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0z"
//                            )
//                        )
//                    )
//                }
//                image {
//                    source = ImageVector(
//                        4.rem,
//                        4.rem,
//                        viewBoxWidth = 100,
//                        viewBoxHeight = 100,
//                        paths = listOf(
//                            ImageVector.Path(
//                                fillColor = Color.green,
//                                path = "M 0,0 L 0,100 L 100,100 L 100,0 Z"
//                            ),
//                            ImageVector.Path(
//                                strokeColor = Color.blue,
//                                strokeWidth = 5.0,
//                                path = "M 0, 0 Q 100, 0, 100, 100 L 0, 100 z"
//                            ),
//                        )
//                    )
//                }
//                image {
//                    source = ImageVector(
//                        4.rem,
//                        4.rem,
//                        viewBoxWidth = 100,
//                        viewBoxHeight = 100,
//                        paths = listOf(
//                            ImageVector.Path(
//                                fillColor = Color.green,
//                                path = "M 0,0 L 0,100 L 100,100 L 100,0 Z"
//                            ),
//                            ImageVector.Path(
//                                strokeColor = Color.blue,
//                                strokeWidth = 5.0,
//                                path = "M 50, 0 Q 100, 0, 100, 50 T 50 100 T 0 50 z"
//                            ),
//                        )
//                    )
//                }
//                image {
//                    source = ImageVector(
//                        4.rem,
//                        4.rem,
//                        viewBoxWidth = 100,
//                        viewBoxHeight = 100,
//                        paths = listOf(
//                            ImageVector.Path(
//                                fillColor = Color.green,
//                                path = "M 0,0 L 0,100 L 100,100 L 100,0 Z"
//                            ),
//                            ImageVector.Path(
//                                strokeColor = Color.blue,
//                                strokeWidth = 5.0,
//                                path = "M 0, 0 C 100, 0, 0, 100, 100, 100 L 0, 100 z"
//                            ),
//                        )
//                    )
//                }
//                image {
//                    source = ImageVector(
//                        4.rem,
//                        4.rem,
//                        viewBoxWidth = 100,
//                        viewBoxHeight = 100,
//                        paths = listOf(
//                            ImageVector.Path(
//                                fillColor = Color.green,
//                                path = "M 0,0 L 0,100 L 100,100 L 100,0 Z"
//                            ),
//                            ImageVector.Path(
//                                strokeColor = Color.blue,
//                                strokeWidth = 5.0,
//                                path = "M 50, 0 C 75, 0, 100, 25, 100, 50 S 100 100 50 100 S 0 100 0 50 z"
//                            ),
//                        )
//                    )
//                }
            }
//            row {
//                Stage.values().forEach {
//                    expanding - image { source = it.image }
//                }
//            }
        }
    }


    enum class Stage(val instructions: String, val image: ImageSource) {
        Exterior("Take a picture of your vehicle at a 45 degree angle", image = vec(
            "m 105.15473,109.21546 a 5.0018632,16.583239 0 0 1 -5.00186,16.58323 5.0018632,16.583239 0 0 1 -5.001865,-16.58323 5.0018632,16.583239 0 0 1 5.001865,-16.583244 5.0018632,16.583239 0 0 1 5.00186,16.583244 z",
            "m 103.83489,109.69366 a 3.3152864,12.545662 0 0 1 -3.31529,12.54566 3.3152864,12.545662 0 0 1 -3.315284,-12.54566 3.3152864,12.545662 0 0 1 3.315284,-12.545665 3.3152864,12.545662 0 0 1 3.31529,12.545665 z",
            "m 129.54839,102.45687 -23.87191,11.5092 c 1.17937,-11.40569 0.1732,-15.981077 0.1732,-15.981077 0,0 -0.77606,-7.260254 -3.3943,-8.395227 -2.618252,-1.134973 -4.668631,1.892869 -5.265596,2.720543 -0.596958,0.827675 -2.822864,5.679616 -3.731532,10.323471 -0.908667,4.64387 -1.020248,11.66919 -2.406854,15.07439 0,0 -5.164061,1.28298 -13.13794,1.91122 -7.973873,0.62823 -49.164752,-0.77111 -52.442407,-0.76256 l -5.552379,0.16474 c 0,0 -5.671501,-0.0405 -11.1786143,-1.42489 -0.6212723,-0.11833 -1.4509262,-1.10144 -1.4997044,-2.54475 l -0.2280022,-2.83092 c -0.4129377,-2.62729 -1.2655713,-2.9077 -1.398749,-4.34478 0.1570763,-2.94622 0.4487634,-3.67752 0.4487634,-3.67752 0,0 0.6818793,-1.38927 0.6818793,-1.49368 -0.03831,-0.67337 -0.2044778,-1.7884 -0.025077,-2.868649 0.1794,-1.080246 0.3477899,-0.276652 0.3583718,-1.633005 0.010584,-1.356359 0.087688,-3.00351 0.2281886,-3.527629 0.1405002,-0.524119 0.028331,-0.895267 0.3497929,-1.600925",
            "m 100.96631,125.5787 c -2.287888,1.37301 -2.544678,1.31838 -3.399205,1.38579 -1.632471,0.12878 -10.42391,-0.25713 -10.42391,-0.25713 0,0 -3.461143,-2.14628 -3.953761,-7.62785",
            "m 100.39007,92.638415 c -2.942975,-0.366487 -3.413937,-0.0562 -3.413937,-0.0562",
            "m 60.889511,92.990376 c 0,0 0.16304,1.821785 4.794591,2.618473 12.837529,-2.373611 15.323138,-3.218222 15.323138,-3.218222 0,0 3.967006,-1.065998 6.581679,-3.608686 1.13422,-1.466641 2.541659,-5.47478 2.541659,-5.47478 0,0 0.136221,-0.855028 -0.206841,-1.101247 -0.343069,-0.246226 -1.146058,-0.377238 -1.146058,-0.377238 0,0 -4.415373,0.228865 -6.234824,0.716384 -4.386341,0.995653 -5.805946,1.823276 -13.354195,3.132046 -3.543685,0.614429 -5.911168,3.462506 -8.299149,7.31327 z",
            "m 10.10305,118.03818 c 0.529627,2.26241 3.383854,6.85961 7.273074,6.6425 3.889221,-0.21713 7.518085,-0.24702 8.771393,-0.61361 1.253309,-0.36661 3.594053,-1.85479 4.665497,-5.02387",
            "m 25.781759,124.18237 c -4.446381,-0.64625 -5.599594,-5.18967 -5.646835,-5.19951",
            "m 7.6154033,93.224198 c -0.093431,-1.305022 0.4481931,-5.2188 0.7067437,-5.626066 0.2585493,-0.407272 0.9219602,-1.895241 2.044629,-2.452456 1.122669,-0.557214 1.437176,-0.931603 3.447755,-1.630838 2.01058,-0.699234 3.774273,-1.504198 4.275909,-1.821668 0.501638,-0.317471 3.149211,-2.414004 5.070624,-3.917013 1.921414,-1.503003 2.448886,-1.690033 4.41212,-3.090522",
            "m 13.832919,83.586752 c -0.500479,1.644881 1.202925,2.596791 1.202925,2.596791 l 2.16825,0.872119 0.139339,0.60207 -1.080001,5.444893 c 0,0 -1.125967,2.097338 -1.777857,2.397145 -0.651889,0.299813 -1.443584,0.482169 -1.742232,0.388258 C 12.444695,95.794118 9.175736,94.61119 8.6487062,94.105673 8.121677,93.600162 7.7459183,92.959525 7.7459183,92.959525",
            "m 129.36897,102.75067 c -0.0963,-3.414855 -0.0133,-4.268693 -0.0133,-4.268693 0,0 0.71502,-5.455741 1.85719,-8.812446",
            "m 85.442616,106.89547 a 2.765572,5.2596419 83.71983 0 1 -4.925551,3.32433 2.765572,5.2596419 83.71983 0 1 -5.530606,-2.17363 2.765572,5.2596419 83.71983 0 1 4.925552,-3.32433 2.765572,5.2596419 83.71983 0 1 5.530605,2.17363 z",
            "m 8.6531564,106.73351 a 2.6691293,1.3347209 71.910486 0 1 -0.439978,2.95163 2.6691293,1.3347209 71.910486 0 1 -2.0975201,-2.12276 2.6691293,1.3347209 71.910486 0 1 0.4399781,-2.95164 2.6691293,1.3347209 71.910486 0 1 2.09752,2.12277 z",
            "m 123.37424,105.52908 c 1.85192,6.88489 5.04816,6.09914 5.04816,6.09914 5.15747,-0.27887 5.15747,-0.27887 5.15747,-0.27887 1.41371,-0.52973 2.4153,-2.52016 2.4153,-2.52016",
        )),
        Vin(
            "Take a picture of the windshield VIN plate..", image = vec(
                "M20,60L130,60L130,90L20,90Z"
            )
        ),
        Interior(
            "Take a picture of the open driver's door", image = vec(
                "m 27.441505,61.570854 C 26.990032,47.352216 27.135084,46.920526 27.135084,46.920526 c 0,0 9.476889,-7.956441 17.212842,-12.161761 C 55.911468,28.472734 83.61569,14.636293 135.48548,22.1704 c -7.25201,30.190218 -13.08262,45.602261 -13.08262,45.602261 0,0 -5.4518,7.056385 -7.18807,14.715122 -1.73628,7.658745 -5.83082,37.574427 -5.83082,37.574427 0,0 -1.78569,2.246 -1.23915,4.65676 -0.74981,0.26137 -20.245293,-4.05645 -20.245293,-4.05645",
                "m 125.11877,29.349469 C 75.786263,22.077847 37.819027,48.596509 37.819027,48.596509 l 0.905805,13.024258 73.160068,3.488687 c 0,0 10.11576,-24.598278 13.23387,-35.759985 z",
                "m 111.90641,65.141266 c 0.70707,4.342208 0.75317,4.888593 0.75317,4.888593 l -11.53743,33.246081 c 0,0 -6.52487,24.94684 -27.587086,17.30442 l -28.77409,-7.43596 c 0,0 -7.466556,-4.72201 -8.997159,-11.15982 -1.53059,-6.437814 -8.328923,-40.491564 -8.328923,-40.491564",
                "m 64.160121,75.448117 c -6.516967,2.291185 -8.356407,2.817269 -8.356407,2.817269 0,0 -1.73357,0.223721 -2.206886,-0.06413 -0.473316,-0.287848 -1.605559,-1.839581 -1.704578,-2.279452 -0.09903,-0.439877 -0.761062,-1.696287 -1.126609,-3.522791 -0.365547,-1.826504 1.142123,-1.791692 1.634927,-1.793096 0.492804,-0.0014 8.209437,0.329307 8.921066,0.529049 1.149655,0.322688 2.519994,2.14028 2.838487,4.313147 z",
                "m 63.224764,75.0369 c -4.844338,1.412224 -7.113254,1.930407 -7.555359,1.966043 -0.442113,0.03563 -1.533825,-0.110073 -1.533825,-0.110073 0,0 -0.678654,-0.502829 -0.933338,-1.094202 5.372087,-1.333299 5.461459,-1.110657 6.304625,-3.70991 3.205227,0.511615 3.717897,2.948142 3.717897,2.948142 z",
                "m 45.473517,89.512467 c 8.030654,17.316753 8.574944,18.147803 8.574944,18.147803 0,0 6.213058,2.97755 21.157638,1.428 0.153461,-0.0502 3.246912,-1.9144 5.924165,-6.1744 -6.390518,-1.0343 -6.808575,-1.20305 -6.808575,-1.20305 -3.014362,-1.5359 -7.028988,-4.538823 -7.028988,-4.538823 0,0 -8.516735,-7.675637 -11.847081,-11.204254 -3.330346,-3.528612 0.107024,-5.453498 0.107024,-5.453498 0,0 1.979808,-0.646581 7.914199,2.284521 10.962519,7.371922 4.5257,2.890302 10.962519,7.371922 15.29063,3.191557 28.836018,6.490051 28.836018,6.490051",
                "m 73.166592,97.231856 c 11.053774,1.612034 11.114915,1.644014 11.114915,1.644014 0,0 -0.773291,1.31617 -2.393009,1.9537 -1.619726,0.63753 -6.666229,-0.68402 -6.666229,-0.68402 0,0 -1.777867,-0.95194 -2.055677,-2.913694 z",
                "m 74.450918,90.12454 -3.659425,2.917201 c 0,0 -0.205378,0.351988 3.047977,1.340418 3.253355,0.988429 11.539286,2.43265 12.418984,2.445711 -0.04207,-0.428418 -0.730011,-3.002573 -4.172983,-5.028088",
                "m 63.272602,86.410917 c -3.230934,-2.700723 -3.230934,-2.700723 -3.230934,-2.700723 l 0.99718,-1.270485 c 3.317733,2.447464 3.317733,2.447464 3.317733,2.447464 z",
                "m 27.158443,46.924845 10.177933,35.374588",
                "m 34.313664,137.03556 c 0.16164,-2.21462 3.079204,-27.76399 3.079204,-27.76399",
                "m 41.008284,110.28579 c -0.09567,0 -4.449975,-1.53303 -4.449975,-1.53303 l -0.05105,-4.57897",
                "m 88.931196,120.3591 c 4.597731,-0.3471 6.364668,-1.69904 6.364668,-1.69904 l 5.619706,-5.64509 1.81339,-1.62712 3.2216,-2.4388 6.07417,-18.352187 -0.92327,-5.356483 8.96947,-19.39888 c 0,0 13.47884,-41.206379 13.53806,-41.82783",
                "m 36.296405,103.65491 0.07885,-0.91925 -1.32246,-14.306294 -4.737997,-23.9493 -0.65914,-15.956907 c 0,0 32.224024,-34.584773 103.895222,-24.197642",
                "m 73.2732,97.303318 C 69.283503,95.737833 61.843695,90.716724 55.135869,83.386404",
                "m 84.120418,98.859475 c 17.689742,1.992215 17.808822,1.934715 17.808822,1.934715",
            )
        ),
        Dashboard(
            "Take a picture of the dashboard to show the odometer", image = vec(
                "M 133.98835,72.647614 A 58.283272,57.654472 0 0 1 75.705078,130.30209 58.283272,57.654472 0 0 1 17.421806,72.647614 58.283272,57.654472 0 0 1 75.705078,14.993141 58.283272,57.654472 0 0 1 133.98835,72.647614 Z",
                "M 124.77441,72.647614 A 49.069328,49.069328 0 0 1 75.705078,121.71694 49.069328,49.069328 0 0 1 26.63575,72.647614 49.069328,49.069328 0 0 1 75.705078,23.578285 49.069328,49.069328 0 0 1 124.77441,72.647614 Z",
                "M 102.07433,64.322106 c 0,0 -23.487268,-9.76671 -52.733365,0 L 59.710782,103.0228 c 16.34099,5.84928 32.31049,0 32.31049,0 z",
                "M 49.077756,64.425056 c 0,0 -21.284717,12.67541 -21.555839,-1.13086",
                "M 102.31584,64.425056 c 0,0 21.28472,12.67541 21.55584,-1.13086",
                "M 55.491585,87.111766 C 36.265881,81.435226 28.793346,86.013286 28.793346,86.013286",
                "M 96.003765,87.111766 C 115.22947,81.435226 122.702,86.013286 122.702,86.013286",
                "M 111.40293,48.731323 A 10.577907,10.577907 0 0 1 100.82503,59.30923 10.577907,10.577907 0 0 1 90.247121,48.731323 10.577907,10.577907 0 0 1 100.82503,38.153417 a 10.577907,10.577907 0 0 1 10.5779,10.577906 z",
                "M 61.968803,48.731323 A 10.577907,10.577907 0 0 1 51.390903,59.30923 10.577907,10.577907 0 0 1 40.812994,48.731323 10.577907,10.577907 0 0 1 51.390903,38.153417 a 10.577907,10.577907 0 0 1 10.5779,10.577906 z",
                "M 52.721818,48.731323 a 1.330915,1.330915 0 0 1 -1.330915,1.330915 1.330915,1.330915 0 0 1 -1.330915,-1.330915 1.330915,1.330915 0 0 1 1.330915,-1.330915 1.330915,1.330915 0 0 1 1.330915,1.330915 z",
                "M 102.15595,48.731323 a 1.330915,1.330915 0 0 1 -1.33092,1.330915 1.330915,1.330915 0 0 1 -1.330914,-1.330915 1.330915,1.330915 0 0 1 1.330914,-1.330915 1.330915,1.330915 0 0 1 1.33092,1.330915 z",
                "M 51.380839,48.726276 c -4.257834,4.25783 -5.817648,6.04988 -5.817648,6.04988",
                "M 100.83766,48.710286 c -3.441808,3.44181 -5.956058,6.10404 -5.956058,6.10404 v 0",
                "M 68.864053,32.750694 h 13.682055 c 1.908847,0 3.445572,1.536726 3.445572,3.445573 v 5.823792 c 0,1.908847 -1.536725,3.445572 -3.445572,3.445572 H 68.864053 c -1.908848,0 -3.445573,-1.536725 -3.445573,-3.445572 v -5.823792 c 0,-1.908847 1.536725,-3.445573 3.445573,-3.445573 z",
                "M 71.269041,48.952316 h 8.872078 c 1.990602,0 3.593145,1.602543 3.593145,3.593146 0,1.990603 -1.602543,3.593146 -3.593145,3.593146 h -8.872078 c -1.990602,0 -3.593145,-1.602543 -3.593145,-3.593146 0,-1.990603 1.602543,-3.593146 3.593145,-3.593146 z",
                "M 73.690487,43.250816 h -0.250803 l -0.493337,-0.796505 -0.489203,0.796505 h -0.250803 l 0.621495,-0.990808 -0.618739,-0.953602 h 0.259071 l 0.478179,0.770323 0.482313,-0.770323 h 0.248046 l -0.609092,0.953602 z m 1.693607,0 h -0.250802 l -0.493338,-0.796505 -0.489203,0.796505 h -0.250803 l 0.621495,-0.990808 -0.618738,-0.953602 h 0.259071 l 0.478178,0.770323 0.482313,-0.770323 h 0.248047 l -0.609092,0.953602 z m 1.693608,0 h -0.250803 l -0.493337,-0.796505 -0.489203,0.796505 h -0.250803 l 0.621495,-0.990808 -0.618739,-0.953602 h 0.259071 l 0.478179,0.770323 0.482313,-0.770323 h 0.248047 l -0.609093,0.953602 z m 1.693608,0 h -0.250803 l -0.493337,-0.796505 -0.489204,0.796505 h -0.250802 l 0.621494,-0.990808 -0.618738,-0.953602 h 0.259071 l 0.478179,0.770323 0.482313,-0.770323 h 0.248046 l -0.609092,0.953602 z m 1.693608,0 h -0.250803 l -0.493338,-0.796505 -0.489203,0.796505 h -0.250802 l 0.621494,-0.990808 -0.618738,-0.953602 h 0.259071 l 0.478178,0.770323 0.482313,-0.770323 h 0.248047 l -0.609092,0.953602 z m 1.693607,0 h -0.250802 l -0.493338,-0.796505 -0.489203,0.796505 h -0.250803 l 0.621495,-0.990808 -0.618739,-0.953602 h 0.259071 l 0.478179,0.770323 0.482313,-0.770323 h 0.248047 l -0.609092,0.953602 z",
                "M 72.080139,44.479805 h -0.242535 l -0.384474,-0.562241 -0.398254,0.562241 h -0.228755 l 0.511253,-0.719338 -0.511253,-0.716582 h 0.246669 l 0.385852,0.558107 0.392742,-0.558107 h 0.228755 l -0.508498,0.708314 z m 1.693614,0 h -0.242536 l -0.384474,-0.562241 -0.398254,0.562241 h -0.228755 l 0.511254,-0.719338 -0.511254,-0.716582 h 0.24667 l 0.385852,0.558107 0.392742,-0.558107 h 0.228755 l -0.508498,0.708314 z m 1.693613,0 h -0.242535 l -0.384474,-0.562241 -0.398254,0.562241 h -0.228755 l 0.511254,-0.719338 -0.511254,-0.716582 h 0.24667 l 0.385851,0.558107 0.392742,-0.558107 h 0.228755 l -0.508497,0.708314 z m 1.693614,0 h -0.242535 l -0.384474,-0.562241 -0.398254,0.562241 h -0.228755 l 0.511253,-0.719338 -0.511253,-0.716582 h 0.246669 l 0.385852,0.558107 0.392742,-0.558107 h 0.228755 l -0.508497,0.708314 z m 1.693614,0 h -0.242536 l -0.384474,-0.562241 -0.398254,0.562241 h -0.228755 l 0.511254,-0.719338 -0.511254,-0.716582 h 0.24667 l 0.385852,0.558107 0.392742,-0.558107 h 0.228755 l -0.508498,0.708314 z m 1.693613,0 h -0.242535 l -0.384474,-0.562241 -0.398254,0.562241 h -0.228755 l 0.511253,-0.719338 -0.511253,-0.716582 h 0.246669 l 0.385852,0.558107 0.392742,-0.558107 h 0.228755 l -0.508497,0.708314 z"
            )
        );
    }
}

private fun vec(vararg pathData: String) = ImageVector(
    width = 10.rem,
    height = 10.rem,
    viewBoxWidth = 150,
    viewBoxHeight = 150,
    paths = pathData.map {
        ImageVector.Path(
            strokeColor = Color.black,
            strokeWidth = 1.0,
            path = it
        )
    }
)